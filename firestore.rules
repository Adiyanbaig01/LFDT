rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Never allow deletion
    }
    
    // Event registrations collection
    match /eventRegistrations/{documentId} {
      // Allow read if user is authenticated OR for admin operations
      allow read: if true; // Temporarily allowing all reads for admin functionality
      
      // Allow create if:
      // 1. User is authenticated
      // 2. The userId in the data matches the authenticated user
      // 3. The document ID follows the pattern: eventId_userId
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        documentId.matches('.*_' + request.auth.uid);
      
      // Allow update if:
      // 1. User is authenticated
      // 2. The userId in existing data matches the authenticated user
      // 3. The userId field is not being changed
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId;
      
      // Never allow deletion (only status updates to 'withdrawn')
      allow delete: if false;
    }
    
    // Shortlisted teams collection
    match /shortlistedTeams/{documentId} {
      // Public read access for shortlisted teams page
      allow read: if true;
      // Allow writes (admin operations)
      allow write: if true;
    }
    
    // Events collection (if you add this later)
    match /events/{eventId} {
      // Public read access for events
      allow read: if true;
      // Only admins can write (you can add admin check later)
      allow write: if false;
    }
  }
}
